---
- name: Setup Docker and Docker Swarm
  hosts: docker_swarm
  gather_facts: true

  roles:
    - docker
    - docker_swarm

- name: Setup Docker Swarm Resources
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Create app network
      command: >
        docker network create
        --driver overlay
        --attachable
        {{ app_network }}
      register: network_result
      failed_when:
        - network_result.rc != 0
        - '"already exists" not in network_result.stderr'

    - name: Create shared data volume for database synchronization
      command: >
        docker volume create
        --driver local
        {{ app_data_volume }}
      register: volume_result
      failed_when:
        - volume_result.rc != 0
        - '"already exists" not in volume_result.stderr'

- name: Initialize Docker Swarm
  hosts: swarm_managers
  gather_facts: true
  serial: 1

  roles:
    - docker_swarm

- name: Join workers to Docker Swarm
  hosts: swarm_workers
  gather_facts: true

  roles:
    - docker_swarm

- name: Display Swarm Status
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Get swarm nodes
      command: docker node ls
      register: swarm_nodes
      changed_when: false

    - name: Display swarm nodes
      debug:
        msg: "{{ swarm_nodes.stdout_lines }}"

- name: Deploy Watchtower and Application Services
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Deploy Watchtower service
      docker_swarm_service:
        name: "{{ watchtower_name }}"
        image: containrrr/watchtower:latest
        mode: replicated
        replicas: 1
        placement:
          constraints:
            - node.role==manager
        mounts:
          - source: /var/run/docker.sock
            target: /var/run/docker.sock
            type: bind
        env:
          WATCHTOWER_POLL_INTERVAL: "{{ watchtower_interval }}"
          WATCHTOWER_CLEANUP: "true"
          WATCHTOWER_INCLUDE_RESTARTING: "true"
          WATCHTOWER_ROLLING_RESTART: "true"
          WATCHTOWER_LABEL_ENABLE: "true"
          WATCHTOWER_DEBUG: "true"
          WATCHTOWER_LOG_LEVEL: "debug"
          WATCHTOWER_TIMEOUT: "60s"
          WATCHTOWER_WARN_ON_HEAD_FAILURE: "never"
          WATCHTOWER_NO_RESTART: "false"
          WATCHTOWER_REVIVE_STOPPED: "false"
          WATCHTOWER_IGNORE_IMAGE_ID: "true"
          WATCHTOWER_IGNORE_IMAGE_SHA: "true"
        labels:
          com.centurylinklabs.watchtower.enable: "false"
        restart_config:
          condition: on-failure
          max_attempts: 3
        state: present

    - name: Deploy application service
      docker_swarm_service:
        name: "{{ app_name }}"
        image: "{{ app_image }}"
        mode: replicated
        replicas: "{{ app_replicas }}"
        networks:
          - "{{ app_network }}"
        publish:
          - published_port: "{{ app_port }}"
            target_port: 80
            protocol: tcp
        mounts:
          - source: "{{ app_data_volume }}"
            target: /app/data
            type: volume
        env:
          NODE_ENV: production
          LOAD_BALANCED: "true"
          SERVICE_NAME: "{{ app_service_name }}"
          CONTAINER_NAME: "{{ '{{' }}.Service.Name{{ '}}' }}.{{ '{{' }}.Task.Slot{{ '}}' }}.{{ '{{' }}.Task.ID{{ '}}' }}"
          CONTAINER_ID: "{{ '{{' }}.Task.ID{{ '}}' }}"
          NODE_NAME: "{{ '{{' }}.Node.Hostname{{ '}}' }}"
          NODE_ID: "{{ '{{' }}.Node.ID{{ '}}' }}"
          TASK_SLOT: "{{ '{{' }}.Task.Slot{{ '}}' }}"
          API_GATEWAY_URL: "{{ api_gateway_url }}"
        dns:
          - 8.8.8.8
          - 1.1.1.1
        labels:
          com.centurylinklabs.watchtower.enable: "true"
          com.centurylinklabs.watchtower.monitor-only: "false"
        restart_config:
          condition: on-failure
          max_attempts: 3
        update_config:
          parallelism: 1
          delay: 30s
          monitor: 10s
          failure_action: rollback
          max_failure_ratio: 0.3
        rollback_config:
          parallelism: 1
          delay: 10s
          monitor: 5s
        state: present

    - name: Wait for services to be running
      command: docker service ps {{ item }} --filter "desired-state=running" --format "{{ '{{' }}.CurrentState{{ '}}' }}"
      register: service_status
      until: service_status.stdout_lines | select('match', '^Running.*') | list | length >= 1
      retries: 20
      delay: 10
      loop:
        - "{{ watchtower_name }}"
        - "{{ app_name }}"

    - name: Display deployment summary
      debug:
        msg: |
          Deployment completed successfully!
          - Watchtower service: {{ watchtower_name }}
          - Application service: {{ app_name }}
          - Watchtower will check for updates every {{ watchtower_interval }}s

    - name: Show all services
      command: docker service ls
      register: services
      changed_when: false

    - name: Display services
      debug:
        msg: "{{ services.stdout_lines }}"