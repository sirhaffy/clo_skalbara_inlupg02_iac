---
- name: Setup Docker and Docker Swarm
  hosts: docker_swarm
  gather_facts: true

  roles:
    - docker
    - docker_swarm

- name: Setup Docker Swarm Resources
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Create app network
      command: >
        docker network create
        --driver overlay
        --attachable
        {{ app_network | default('app-network') }}
      register: network_result
      failed_when:
        - network_result.rc != 0
        - '"already exists" not in network_result.stderr'

    - name: Create shared data volume for database synchronization
      command: >
        docker volume create
        --driver local
        app-data-volume
      register: volume_result
      failed_when:
        - volume_result.rc != 0
        - '"already exists" not in volume_result.stderr'

- name: Initialize Docker Swarm
  hosts: swarm_managers
  gather_facts: true
  serial: 1

  roles:
    - docker_swarm

- name: Join workers to Docker Swarm
  hosts: swarm_workers
  gather_facts: true

  roles:
    - docker_swarm

- name: Display Swarm Status
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Get swarm nodes
      command: docker node ls
      register: swarm_nodes
      changed_when: false

    - name: Display swarm nodes
      debug:
        msg: "{{ swarm_nodes.stdout_lines }}"

- name: Deploy Watchtower and Application Services
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Create app network
      command: >
        docker network create
        --driver overlay
        --attachable
        {{ app_network | default('app-network') }}
      register: network_result
      failed_when:
        - network_result.rc != 0
        - "'already exists' not in network_result.stderr"
      changed_when: network_result.rc == 0

    - name: Deploy Watchtower service
      command: >
        docker service create
        --name {{ watchtower_name | default('watchtower') }}
        --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock
        --constraint 'node.role==manager'
        --env WATCHTOWER_POLL_INTERVAL={{ watchtower_interval | default(300) }}
        --env WATCHTOWER_CLEANUP=true
        --env WATCHTOWER_INCLUDE_RESTARTING=true
        --env WATCHTOWER_ROLLING_RESTART=true
        --env WATCHTOWER_TIMEOUT=60s
        --env WATCHTOWER_LOG_LEVEL=info
        --label com.centurylinklabs.watchtower.enable=false
        --restart-condition on-failure
        --restart-max-attempts 3
        containrrr/watchtower:latest
        --label-enable
      register: watchtower_result
      failed_when:
        - watchtower_result.rc != 0
        - "'already exists' not in watchtower_result.stderr"
      changed_when: watchtower_result.rc == 0

    - name: Check if app image exists
      command: docker manifest inspect {{ app_image | default('haffy/clo-fresva-app:latest') }}
      register: image_check
      failed_when: false
      changed_when: false

    - name: Check if app service already exists
      command: docker service ls --filter name={{ app_name | default('clo-fresva-app') }} --format "table {{'{{'}}{{'}}'}}Name{{'{{'}}{{'}}'}}}"
      register: existing_service
      failed_when: false
      changed_when: false

    - name: Get current service image digest if service exists
      command: docker service inspect {{ app_name | default('clo-fresva-app') }} --format "{{'{{'}}{{'}}'}}Spec.TaskTemplate.ContainerSpec.Image{{'{{'}}{{'}}'}}"
      register: current_image
      when: existing_service.stdout_lines | length > 1
      failed_when: false
      changed_when: false

    - name: Get latest image digest from registry
      command: docker manifest inspect {{ app_image | default('haffy/clo-fresva-app:latest') }} --verbose
      register: latest_image_manifest
      failed_when: false
      changed_when: false

    - name: Parse latest image digest
      set_fact:
        latest_digest: "{{ latest_image_manifest.stdout | from_json | json_query('[0].Descriptor.digest') }}"
      when: latest_image_manifest.rc == 0

    - name: Check if image update is needed
      set_fact:
        needs_update: "{{ (existing_service.stdout_lines | length <= 1) or (latest_digest is defined and latest_digest not in (current_image.stdout | default(''))) }}"

    - name: Display update decision
      debug:
        msg: |
          Service exists: {{ existing_service.stdout_lines | length > 1 }}
          Current image: {{ current_image.stdout | default('none') }}
          Latest digest: {{ latest_digest | default('unknown') }}
          Update needed: {{ needs_update }}

    - name: Perform smart rolling update when needed
      command: >
        docker service update
        --image {{ app_image | default('haffy/clo-fresva-app:latest') }}
        --env-add NODE_ENV=production
        --env-add LOAD_BALANCED=true
        --env-add SERVICE_NAME=clo-fresva-app
        --env-add CONTAINER_NAME="{{ '{{' }}.Service.Name{{ '}}' }}.{{ '{{' }}.Task.Slot{{ '}}' }}.{{ '{{' }}.Task.ID{{ '}}' }}"
        --env-add NODE_NAME="{{ '{{' }}.Node.Hostname{{ '}}' }}"
        --env-add NODE_ID="{{ '{{' }}.Node.ID{{ '}}' }}"
        --update-parallelism 1
        --update-delay 30s
        --update-monitor 10s
        --update-failure-action rollback
        --update-max-failure-ratio 0.3
        --rollback-parallelism 1
        --rollback-delay 10s
        --rollback-monitor 5s
        {{ app_name | default('clo-fresva-app') }}
      register: app_update_result
      when: existing_service.stdout_lines | length > 1 and needs_update
      failed_when: false

    - name: Create new application service (first deployment)
      command: >
        docker service create
        --name {{ app_name | default('clo-fresva-app') }}
        --replicas {{ app_replicas | default(3) }}
        --network {{ app_network | default('app-network') }}
        --publish {{ app_port | default(80) }}:80
        --mount type=volume,source=app-data-volume,target=/app/data
        --env NODE_ENV=production
        --env LOAD_BALANCED=true
        --env SERVICE_NAME=clo-fresva-app
        --env CONTAINER_NAME="{{ '{{' }}.Service.Name{{ '}}' }}.{{ '{{' }}.Task.Slot{{ '}}' }}.{{ '{{' }}.Task.ID{{ '}}' }}"
        --env NODE_NAME="{{ '{{' }}.Node.Hostname{{ '}}' }}"
        --env NODE_ID="{{ '{{' }}.Node.ID{{ '}}' }}"
        --hostname="{{ '{{' }}.Service.Name{{ '}}' }}.{{ '{{' }}.Task.Slot{{ '}}' }}.{{ '{{' }}.Task.ID{{ '}}' }}"
        --label com.centurylinklabs.watchtower.enable=true
        --restart-condition on-failure
        --restart-max-attempts 3
        --update-parallelism 1
        --update-delay 30s
        --update-failure-action rollback
        --update-max-failure-ratio 0.3
        --rollback-parallelism 1
        --rollback-delay 10s
        {{ app_image | default('haffy/clo-fresva-app:latest') }}
      register: app_create_result
      when: existing_service.stdout_lines | length <= 1
      failed_when: false

    - name: Set deployment result
      set_fact:
        app_result: "{{ app_update_result if (existing_service.stdout_lines | length > 1 and needs_update) else app_create_result if (existing_service.stdout_lines | length <= 1) else {'rc': 0, 'stdout': 'No update needed', 'stderr': '', 'changed': false} }}"

    - name: Wait for rolling update to complete
      command: docker service ps {{ app_name | default('clo-fresva-app') }} --filter "desired-state=running" --format "{{ '{{' }}.CurrentState{{ '}}' }}"
      register: update_status
      until: update_status.stdout_lines | select('match', '^Running.*') | list | length >= (app_replicas | default(3) | int)
      retries: 20
      delay: 10
      when: needs_update and app_result.rc is defined and app_result.rc == 0

    - name: Clean up old/unused images on all nodes
      command: docker image prune -f
      when: needs_update and app_result.rc is defined and app_result.rc == 0
      failed_when: false
      changed_when: false

    - name: Verify service health after update
      command: docker service ps {{ app_name | default('clo-fresva-app') }} --format "{{ '{{' }}.Name{{ '}}' }}\t{{ '{{' }}.CurrentState{{ '}}' }}\t{{ '{{' }}.Error{{ '}}' }}"
      register: service_status
      failed_when: false
      changed_when: false

    - name: Debug app deployment result
      debug:
        msg: |
          App deployment result:
          - Return code: {{ app_result.rc }}
          - Stdout: {{ app_result.stdout }}
          - Stderr: {{ app_result.stderr }}

    - name: Show all services after deployment
      command: docker service ls
      register: services_debug
      changed_when: false

    - name: Display all services
      debug:
        msg: "{{ services_debug.stdout_lines }}"

    - name: Check app service status
      command: docker service ps {{ app_name | default('clo-fresva-app') }} --no-trunc
      register: app_service_status
      failed_when: false
      changed_when: false

    - name: Display app service status
      debug:
        msg: "{{ app_service_status.stdout_lines }}"
      when: app_service_status.rc == 0

    - name: Display image not found message
      debug:
        msg: |
          Image haffy/clo-fresva-app:latest not found
          Deploy your frontend app first to make this image available
          Expected behavior: ALB will show 502 until frontend is deployed
      when: image_check.rc != 0

    - name: Display successful deployment message
      debug:
        msg: |
          Application service deployed successfully
          App running on port 80 (Nginx serving React app)
          Health check: curl http://localhost:3000/api/health
      when: image_check.rc == 0 and app_result.rc == 0

    - name: Display deployment failure message
      debug:
        msg: "Service deployment failed: {{ app_result.stderr | default('Unknown error') }}"
      when: image_check.rc == 0 and app_result.rc != 0

    - name: Show service status
      command: docker service ls
      register: service_list
      changed_when: false

    - name: Display services
      debug:
        msg: "{{ service_list.stdout_lines }}"

    - name: Wait for application to be healthy
      uri:
        url: "http://{{ ansible_default_ipv4.address }}{{ health_endpoint | default('/api/health') }}"
        method: GET
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: "{{ health_retries | default(12) }}"
      delay: "{{ health_delay | default(10) }}"
      ignore_errors: true

    - name: Set watchtower status
      set_fact:
        watchtower_status: "{{ 'Created' if watchtower_result.changed else 'Already exists' }}"

    - name: Set app service status
      set_fact:
        app_service_status: "{{ 'Created' if app_result.changed else 'Already exists' }}"

    - name: Set health check status
      set_fact:
        health_status: "{{ 'Healthy' if health_check.status == 200 else 'Failed' }}"

    - name: Display deployment summary
      debug:
        msg: |
          Deployment completed!
          - Watchtower: {{ watchtower_status }}
          - App Service: {{ app_service_status }}
          - Health Check: {{ health_status }}
          - Application URL: http://{{ ansible_default_ipv4.address }}
          - Watchtower will check for updates every {{ watchtower_interval | default(300) }}s

    - name: Show service status
      command: docker service ls
      register: services
      changed_when: false

    - name: Display services
      debug:
        msg: "{{ services.stdout_lines }}"