---
- name: Setup Docker Swarm Cluster
  hosts: docker_swarm
  become: true
  gather_facts: true

  pre_tasks:
    - name: Wait for system to be ready
      wait_for_connection:
        timeout: 300

    - name: Gather facts
      setup:

  roles:
    - docker

  post_tasks:
    - name: Verify Docker installation
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version.stdout }}"

- name: Initialize Docker Swarm
  hosts: swarm_managers
  gather_facts: true
  serial: 1

  roles:
    - docker_swarm

- name: Join workers to Docker Swarm
  hosts: swarm_workers
  gather_facts: true

  roles:
    - docker_swarm

- name: Display Swarm Status
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Get swarm nodes
      command: docker node ls
      register: swarm_nodes
      changed_when: false

    - name: Display swarm nodes
      debug:
        msg: "{{ swarm_nodes.stdout_lines }}"

- name: Deploy Watchtower and Application Services
  hosts: swarm_managers[0]
  gather_facts: false
  vars:
    app_image: "sirhaffy/clo-fresva-app:latest"
    watchtower_interval: 300  # Check every 5 minutes

  tasks:
    - name: Create app network
      command: >
        docker network create
        --driver overlay
        --attachable
        app-network
      register: network_result
      failed_when:
        - network_result.rc != 0
        - "'already exists' not in network_result.stderr"
      changed_when: network_result.rc == 0

    - name: Deploy Watchtower service
      command: >
        docker service create
        --name watchtower
        --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock
        --constraint 'node.role==manager'
        --env WATCHTOWER_POLL_INTERVAL={{ watchtower_interval }}
        --env WATCHTOWER_CLEANUP=true
        --env WATCHTOWER_INCLUDE_RESTARTING=true
        --env WATCHTOWER_ROLLING_RESTART=true
        --env WATCHTOWER_TIMEOUT=60s
        --env WATCHTOWER_LOG_LEVEL=info
        --label com.centurylinklabs.watchtower.enable=false
        --restart-condition on-failure
        --restart-max-attempts 3
        containrrr/watchtower:latest
        --label-enable
      register: watchtower_result
      failed_when:
        - watchtower_result.rc != 0
        - "'already exists' not in watchtower_result.stderr"
      changed_when: watchtower_result.rc == 0

    - name: Check if app image exists
      command: docker manifest inspect {{ app_image }}
      register: image_check
      failed_when: false
      changed_when: false

    - name: Deploy maintenance page (fallback)
      command: >
        docker service create
        --name maintenance-page
        --replicas 2
        --network app-network
        --publish 80:80
        --label com.centurylinklabs.watchtower.enable=false
        --restart-condition on-failure
        --restart-max-attempts 3
        --mount type=tmpfs,destination=/usr/share/nginx/html
        nginx:alpine
      register: maintenance_result
      when: image_check.rc != 0
      failed_when: false
      changed_when: maintenance_result.rc == 0

    - name: Create custom maintenance HTML
      command: >
        docker exec $(docker service ps maintenance-page --format "table {{.ID}}" --no-trunc | tail -n +2 | head -1)
        sh -c 'cat > /usr/share/nginx/html/index.html << EOF
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Coming Soon - CLO Fresva App</title>
            <style>
                body { font-family: Arial, sans-serif; text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; margin: 0; padding: 0; min-height: 100vh; display: flex; align-items: center; justify-content: center; }
                .container { max-width: 600px; padding: 2rem; }
                h1 { font-size: 3rem; margin-bottom: 1rem; }
                p { font-size: 1.2rem; margin-bottom: 2rem; }
                .spinner { border: 4px solid rgba(255,255,255,0.3); border-radius: 50%; border-top: 4px solid white; width: 40px; height: 40px; animation: spin 1s linear infinite; margin: 0 auto; }
                @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ Coming Soon</h1>
                <div class="spinner"></div>
                <p>We are preparing something amazing for you!</p>
                <p>Our application is being deployed and will be available shortly.</p>
                <small>CLO Fresva - Skalbara Molnapplikationer</small>
            </div>
        </body>
        </html>
        EOF'
      when: image_check.rc != 0 and maintenance_result.rc == 0
      failed_when: false
      changed_when: false

    - name: Deploy application service (if image exists)
      command: >
        docker service create
        --name clo-fresva-app
        --replicas 3
        --network app-network
        --publish 80:3000
        --env NODE_ENV=production
        --env LOAD_BALANCED=true
        --label com.centurylinklabs.watchtower.enable=true
        --update-config parallelism=1,delay=10s,failure-action=rollback,order=start-first
        --rollback-config parallelism=1,delay=10s
        --restart-condition on-failure
        --restart-max-attempts 3
        --health-cmd "curl -f http://localhost:3000/api/health || exit 1"
        --health-interval 30s
        --health-retries 3
        --health-timeout 10s
        --health-start-period 40s
        {{ app_image }}
      register: app_result
      when: image_check.rc == 0
      failed_when: false
      changed_when: app_result.rc == 0

    - name: Remove maintenance page if main app is running
      command: docker service rm maintenance-page
      when: image_check.rc == 0 and app_result.rc == 0
      failed_when: false
      changed_when: false

    - name: Display deployment status
      debug:
        msg: |
          {% if image_check.rc != 0 %}
          ‚ùå Image {{ app_image }} not found
          üí° Deploy your frontend app first to make this image available
          üìù Expected behavior: ALB will show 502 until frontend is deployed
          {% elif app_result.rc == 0 %}
          ‚úÖ Application service deployed successfully
          üåê App running on port 80 (maps to container port 3000)
          ÔøΩ Health check: curl http://localhost:3000/api/health
          {% else %}
          ‚ö†Ô∏è  Service deployment failed: {{ app_result.stderr | default('Unknown error') }}
          {% endif %}

    - name: Show service status
      command: docker service ls
      register: service_list
      changed_when: false

    - name: Display services
      debug:
        msg: "{{ service_list.stdout_lines }}"
      changed_when: app_result.rc == 0

    - name: Wait for application to be healthy
      uri:
        url: "http://{{ ansible_default_ipv4.address }}/api/health"
        method: GET
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: 12
      delay: 10
      ignore_errors: true

    - name: Display deployment status
      debug:
        msg: |
          üöÄ Deployment completed!
          - Watchtower: {{ 'Created' if watchtower_result.changed else 'Already exists' }}
          - App Service: {{ 'Created' if app_result.changed else 'Already exists' }}
          - Health Check: {{ 'Healthy' if health_check.status == 200 else 'Failed' }}
          - Application URL: http://{{ ansible_default_ipv4.address }}
          - Watchtower will check for updates every {{ watchtower_interval }}s

    - name: Show service status
      command: docker service ls
      register: services
      changed_when: false

    - name: Display services
      debug:
        msg: "{{ services.stdout_lines }}"