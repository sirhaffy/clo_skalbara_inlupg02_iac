---
- name: Setup Docker and Docker Swarm
  hosts: docker_swarm
  gather_facts: true

  roles:
    - docker
    - docker_swarm

- name: Setup Docker Swarm Resources
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Create app network
      command: >
        docker network create
        --driver overlay
        --attachable
        {{ app_network }}
      register: network_result
      failed_when:
        - network_result.rc != 0
        - '"already exists" not in network_result.stderr'

    - name: Create shared data volume for database synchronization
      command: >
        docker volume create
        --driver local
        {{ app_data_volume }}
      register: volume_result
      failed_when:
        - volume_result.rc != 0
        - '"already exists" not in volume_result.stderr'

- name: Initialize Docker Swarm
  hosts: swarm_managers
  gather_facts: true
  serial: 1

  roles:
    - docker_swarm

- name: Join workers to Docker Swarm
  hosts: swarm_workers
  gather_facts: true

  roles:
    - docker_swarm

- name: Display Swarm Status
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Get swarm nodes
      command: docker node ls
      register: swarm_nodes
      changed_when: false

    - name: Display swarm nodes
      debug:
        msg: "{{ swarm_nodes.stdout_lines }}"

- name: Deploy Application Services
  hosts: swarm_managers[0]
  gather_facts: false

  tasks:
    - name: Check if application service already exists
      command: docker service ls --filter name={{ app_name }} --format "{{ '{{' }}.Name{{ '}}' }}"
      register: app_exists
      failed_when: false
      changed_when: false

    - name: Deploy application service
      shell: |
        if [[ "{{ app_name }}" =~ $(docker service ls --filter name={{ app_name }} --format "{{ '{{' }}.Name{{ '}}' }}") ]]; then
          echo "Service {{ app_name }} already exists, updating..."
          docker service update \
            --image {{ app_image }} \
            --env-add API_GATEWAY_URL={{ api_gateway_url }} \
            {{ app_name }}
        else
          echo "Creating new service {{ app_name }}..."
          docker service create \
            --name {{ app_name }} \
            --replicas {{ app_replicas }} \
            --network {{ app_network }} \
            --publish {{ app_port }}:80 \
            --mount type=volume,source={{ app_data_volume }},target=/app/data \
            --env NODE_ENV=production \
            --env LOAD_BALANCED=true \
            --env SERVICE_NAME={{ app_service_name }} \
            --env CONTAINER_NAME="{{ '{{' }}.Service.Name{{ '}}' }}.{{ '{{' }}.Task.Slot{{ '}}' }}.{{ '{{' }}.Task.ID{{ '}}' }}" \
            --env CONTAINER_ID="{{ '{{' }}.Task.ID{{ '}}' }}" \
            --env NODE_NAME="{{ '{{' }}.Node.Hostname{{ '}}' }}" \
            --env NODE_ID="{{ '{{' }}.Node.ID{{ '}}' }}" \
            --env TASK_SLOT="{{ '{{' }}.Task.Slot{{ '}}' }}" \
            --env API_GATEWAY_URL={{ api_gateway_url }} \
            --hostname="{{ '{{' }}.Service.Name{{ '}}' }}.{{ '{{' }}.Task.Slot{{ '}}' }}.{{ '{{' }}.Task.ID{{ '}}' }}" \
            --dns 8.8.8.8 \
            --dns 1.1.1.1 \
            --restart-condition on-failure \
            --restart-max-attempts 3 \
            --update-parallelism 1 \
            --update-delay 30s \
            --update-failure-action rollback \
            --update-max-failure-ratio 0.3 \
            --rollback-parallelism 1 \
            --rollback-delay 10s \
            {{ app_image }}
        fi
      register: app_result
      failed_when: false

    - name: Debug deployment results
      debug:
        msg: |
          App deployment result: {{ app_result.rc | default('N/A') }}
          App output: {{ app_result.stdout | default('No output') }}

    - name: Display deployment summary
      debug:
        msg: |
          Deployment completed successfully!
          - Application service: {{ app_name }}
          - Updates will be handled by GitHub Actions CI/CD

    - name: Show all services
      command: docker service ls
      register: services
      changed_when: false

    - name: Display services
      debug:
        msg: "{{ services.stdout_lines }}"