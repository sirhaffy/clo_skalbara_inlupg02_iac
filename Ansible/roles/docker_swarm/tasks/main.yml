---
# Docker Swarm setup using CLI commands only (no Python SDK)

- name: Check if Swarm is already initialized
  shell: docker info --format '{{.Swarm.LocalNodeState}}'
  register: swarm_state
  ignore_errors: true
  changed_when: false

- name: Initialize Docker Swarm on primary manager
  shell: docker swarm init --advertise-addr {{ swarm_advertise_addr }}
  when:
    - swarm_primary is defined and swarm_primary
    - swarm_state.stdout != 'active'
  register: swarm_init_result

- name: Get manager join token
  shell: docker swarm join-token manager -q
  register: manager_token
  when: swarm_primary is defined and swarm_primary
  changed_when: false

- name: Get worker join token
  shell: docker swarm join-token worker -q
  register: worker_token
  when: swarm_primary is defined and swarm_primary
  changed_when: false

- name: Save manager join token to dummy host
  add_host:
    name: "swarm_manager_token_holder"
    token: "{{ manager_token.stdout }}"
  when:
    - swarm_primary is defined and swarm_primary
    - manager_token.stdout is defined

- name: Save worker join token to dummy host
  add_host:
    name: "swarm_worker_token_holder"
    token: "{{ worker_token.stdout }}"
  when:
    - swarm_primary is defined and swarm_primary
    - worker_token.stdout is defined

- name: Save swarm manager address to dummy host
  add_host:
    name: "swarm_manager_address_holder"
    address: "{{ swarm_advertise_addr }}:2377"
  when: swarm_primary is defined and swarm_primary

- name: Join additional managers to swarm
  shell: docker swarm join --token {{ hostvars['swarm_manager_token_holder']['token'] }} {{ hostvars['swarm_manager_address_holder']['address'] }}
  when:
    - swarm_role == 'manager'
    - swarm_primary is not defined or not swarm_primary
    - hostvars['swarm_manager_token_holder']['token'] is defined
    - swarm_state.stdout != 'active'
  retries: "{{ swarm_manager_join_retries }}"
  delay: "{{ swarm_manager_join_delay }}"

- name: Join workers to swarm
  shell: docker swarm join --token {{ hostvars['swarm_worker_token_holder']['token'] }} {{ hostvars['swarm_manager_address_holder']['address'] }}
  when:
    - swarm_role == 'worker'
    - hostvars['swarm_worker_token_holder']['token'] is defined
    - swarm_state.stdout != 'active'
  retries: "{{ swarm_worker_join_retries }}"
  delay: "{{ swarm_worker_join_delay }}"

- name: Display swarm status
  shell: docker node ls
  register: node_status
  when: swarm_primary is defined and swarm_primary
  changed_when: false

- name: Show swarm node information
  debug:
    msg: "{{ node_status.stdout_lines }}"
  when: 
    - swarm_primary is defined and swarm_primary
    - node_status.stdout_lines is defined

- name: Get current node info
  shell: docker info --format '{{.Swarm.NodeID}} {{.Swarm.LocalNodeState}}'
  register: current_node_info
  changed_when: false

- name: Show current node status
  debug:
    msg: "Node {{ ansible_hostname }} is {{ current_node_info.stdout.split()[1] }} in swarm (ID: {{ current_node_info.stdout.split()[0] }})"
  when: current_node_info.stdout is defined