---
- name: Update system packages
  dnf:
    name: "*"
    state: latest
    update_cache: true
  become: true

- name: Install required packages
  dnf:
    name:
      - docker
      - python3-pip
    state: present
  become: true

- name: Install Docker SDK for Python
  pip:
    name: docker
    state: present
  become: true

- name: Start and enable Docker service
  systemd:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"
  become: true
  notify: restart docker

- name: Add ec2-user to docker group
  user:
    name: ec2-user
    groups: docker
    append: true
  become: true
  notify: restart docker

- name: Configure Docker daemon
  copy:
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2"
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  become: true
  notify: restart docker

- name: Ensure Docker is running
  systemd:
    name: docker
    state: started
  become: true

# SSH Security Hardening for Docker nodes
- name: Configure SSH security settings
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    backup: true
  become: true
  loop:
    - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
    - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
    - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
    - { regexp: '^#?AuthorizedKeysFile', line: 'AuthorizedKeysFile .ssh/authorized_keys' }
    - { regexp: '^#?PermitEmptyPasswords', line: 'PermitEmptyPasswords no' }
    - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
    - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
    - { regexp: '^#?AllowUsers', line: 'AllowUsers ec2-user' }
    - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
    - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }
  notify: restart sshd

- name: Set SSH banner for Docker nodes
  copy:
    content: |
      ================================================================================
                              DOCKER SWARM NODE - AUTHORIZED ACCESS ONLY
      ================================================================================

      This system is for authorized users only. All activities are monitored
      and logged. Unauthorized access is strictly prohibited.

      Docker Swarm Node - {{ inventory_hostname }}
      Access only through bastion host
      Managed by Ansible
      ================================================================================
    dest: /etc/ssh/ssh_banner
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Configure SSH banner
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^#?Banner'
    line: 'Banner /etc/ssh/ssh_banner'
    state: present
  become: true
  notify: restart sshd